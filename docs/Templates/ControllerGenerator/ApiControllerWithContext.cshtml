@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Creative.DTO.Lineup;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
        @:using @namespaceName;
    }
}

namespace @Model.ControllerNamespace
{
@{
    string routePrefix = "api/" + Model.ControllerRootName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = Model.ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
}
    [Route("api/[controller]")]
    [ApiController]
    public class @Model.ControllerName : ControllerBase
    {
    private readonly @Model.ContextTypeName _context;

    public @(Model.ControllerName)(@Model.ContextTypeName context)
    {
    _context = context;
    }

    // GET: @routePrefix
    [HttpGet]
    public async Task<ActionResult<IEnumerable<@(Model.ModelTypeName)DTO>>> Get@(entitySetName)()
    {
    @{
        if (@Model.NullableEnabled)
        {
            @:if (_context.@(entitySetName) == null)
            @:{
            @:    return NotFound();
            @:}
        }
    }

    var list@(Model.ControllerRootName) = await _context.@(entitySetName).Select(x => EntityToDTO(x)).ToListAsync();
    return list@(Model.ControllerRootName);
    }

    // GET: @routePrefix/5
    [HttpGet("{id}")]
    public async Task<ActionResult<@(Model.ModelTypeName)DTO>> Get@(Model.ModelTypeName)(@primaryKeyShortTypeName id)
    {
    @{
        if (@Model.NullableEnabled)
        {
            @:if (_context.@(entitySetName) == null)
            @:{
            @:    return NotFound();
            @:}
        }
    }

    var @Model.ModelVariable = await _context.@(entitySetName).FindAsync(id);
    if (@Model.ModelVariable == null)
    {
    return NotFound();
    }

    return EntityToDTO(@Model.ModelVariable);
    }

    // PUT: @routePrefix/5
    // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
    [HttpPut("{id}")]
    public async Task<IActionResult> Put@(Model.ModelTypeName)(@primaryKeyShortTypeName id, @(Model.ModelTypeName)DTO dto)
    {
    if (id != dto.@primaryKeyName)
    {
    return BadRequest();
    }

    var @Model.ModelVariable = await _context.@(entitySetName).FirstOrDefaultAsync(model => model.@primaryKeyName == id);
    if (@Model.ModelVariable == null)
    {
    return NotFound();
    }

    @{
        Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
        {
            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property))
            {
                @: @Model.ModelVariable.@GetValueExpression(property) = dto.@GetValueExpression(property);
            }
        }
    }

    _context.Entry(@Model.ModelVariable).State = EntityState.Modified;

    try
    {
    await _context.SaveChangesAsync();
    }
    catch (DbUpdateConcurrencyException)
    {
    if (!@(Model.ModelTypeName)Exists(id))
    {
    return NotFound();
    }
    else
    {
    throw;
    }
    }

    return NoContent();
    }

    // POST: @routePrefix
    // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
    [HttpPost]
    public async Task<ActionResult<@(Model.ModelTypeName)DTO>> Post@(Model.ModelTypeName)(@(Model.ModelTypeName)DTO dto)
    {
    @{        
        @:if (_context.@(entitySetName) == null)
        @:{
        @:    return Problem("Entity set '@Model.ContextTypeName.@(entitySetName)'  is null.");
        @:}

        @: var @Model.ModelVariable = new @(Model.ModelTypeName)()
        {
            @:{
            Dictionary<string, IPropertyMetadata> propertyLookup2 = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
            foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
            {
                if (propertyLookup2.TryGetValue(item.Name, out IPropertyMetadata property))
                {
                    @: @GetValueExpression(property) = dto.@GetValueExpression(property),
                }
            }
            @:};
        }
    }

    _context.@(entitySetName).Add(@Model.ModelVariable);
    @{
        if (primaryKeyIsAutoGenerated)
        {
            @:await _context.SaveChangesAsync();
        }
        else
        {
            @:try
            @:{
            @:await _context.SaveChangesAsync();
            @:}
            @:catch (DbUpdateException)
            @:{
            @:if (@(Model.ModelTypeName)Exists(@(Model.ModelVariable).@primaryKeyName))
            @:{
            @:return Conflict();
            @:}
            @:else
            @:{
            @:throw;
            @:}
            @:}
        }
    }

    return CreatedAtAction("Get@(Model.ModelTypeName)", new { id = @(Model.ModelVariable).@primaryKeyName }, @Model.ModelVariable);
    }

    // DELETE: @routePrefix/5
    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete@(Model.ModelTypeName)(@primaryKeyShortTypeName id)
        {
        @{
            if (@Model.NullableEnabled)
            {
                @:if (_context.@(entitySetName) == null)
                @:{
                @:    return NotFound();
                @:}
            }
        }
        var @Model.ModelVariable = await _context.@(entitySetName).FindAsync(id);
        if (@Model.ModelVariable == null)
        {
        return NotFound();
        }

        _context.@(entitySetName).Remove(@Model.ModelVariable);
        await _context.SaveChangesAsync();

        return NoContent();
        }

        private bool @(Model.ModelTypeName)Exists(@primaryKeyShortTypeName id)
        {
        @{
            if (@Model.NullableEnabled)
            {
                @:return (_context.@(entitySetName)?.Any(e => e.@primaryKeyName == id)).GetValueOrDefault();
            }
            else
            {
                @:return _context.@(entitySetName).Any(e => e.@primaryKeyName == id);
            }
        }
        }

        private static @(Model.ModelTypeName)DTO EntityToDTO(@(Model.ModelTypeName) @Model.ModelVariable) =>
        new @(Model.ModelTypeName)DTO
        {


        @{
            Dictionary<string, IPropertyMetadata> propertyLookup3 = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
            foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
            {
                if (propertyLookup3.TryGetValue(item.Name, out IPropertyMetadata property))
                {
                    @: @GetValueExpression(property) = @Model.ModelVariable.@GetValueExpression(property),
                }
            }
        }

        };
        }
        }

        @functions
{
            string GetPrimaryKeyName()
            {
                return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
                ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
                : null;
            }

            string GetValueExpression(IPropertyMetadata property)
            {
                return property.PropertyName;
            }

            string GetValueExpression(INavigationMetadata navigation)
            {
                return navigation.AssociationPropertyName;
            }
        }
