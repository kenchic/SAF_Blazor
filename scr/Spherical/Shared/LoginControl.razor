@page "/LoginControl"
@inject NavigationManager NavigationManager
@using System.Web;

<div class="container">
    <div class="d-flex justify-content-center h-100">
        <div class="card">
            <div class="card-header">
                <div class="text-center my-3">
                    <img src="_content/Creative/img/spherical.logo.png" height="90" width="120" />
                    <h3>Iniciar Sesión</h3>
                </div>
            </div>
            <div class="card-body">
                <form>
                    <div class="input-group mb-3">
                        <span class="input-group-text bg-warning text-dark"><i class="fa fa-user"></i></span>
                        <input @ref="TxtUserName" type="text" class="form-control" placeholder="Usuario" aria-label="Username" aria-describedby="sUsername" @bind="@Username">
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text bg-warning text-dark"><i class="fa fa-key"></i></span>
                        <input type="password" class="form-control" placeholder="Clave" @bind="@Password">
                    </div>
                    <div class="input-group mb-3">
                        <button type="submit" class="btn bg-warning text-dark form-control"  onclick="@Ingresar">Ingresar</button>
                    </div>
                </form>
            </div>
            <div class="card-footer">
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string ReturnUrl { get; set; } = string.Empty;

    string Username = "";
    string Password = "";

    private ElementReference TxtUserName;

    private string encode(string param)
    {
        return HttpUtility.UrlEncode(param);
    }

    private void Ingresar()
    {
        NavigationManager.NavigateTo($"/Login?paramUsername={encode(@Username)}&paramPassword={encode(@Password)}&returnUrl={encode(@ReturnUrl)}", forceLoad: true);
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            await TxtUserName.FocusAsync();
        }
    }
}